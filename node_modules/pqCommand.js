
// pq      ---+ 2
// officer --+| 4
// zarp    -+|| 8
// user    +||| 16
//         1111 30

// id: '600261179826503680', name: 'pq',
// id: '599877756834152450', name: 'officer',
// id: '600261181214818305', name: 'zarp',

class pqCommand {
	constructor (name, aliases, description, permission, format, pfunc, efunc) {
		this._name        = name
		this._aliases     = aliases ? aliases : []
		this._description = description
		this._permission  = permission

		this.pcommand = {}
		this.pcommand [format] = pfunc

		this.ecommand = {}
		this.ecommand [format] = efunc
	}

	get name        ( ) {return this._name           }
	set name        (_) {       this._name        = _}
	get aliases     ( ) {return this._aliases        }
	set aliases     (_) {       this._aliases     = _}
	get description ( ) {return this._description    }
	set description (_) {       this._description = _}

	addformat (format, func) {
		this.command [format] = func
	}

	run (format, ..._) {
		return this.pcommand [format] (..._)
	}

	error (format, ..._) {
		return this.ecommand [format] (..._)
	}
}

class pqCommandManager {
	constructor () {
		this._commands    = {}
		this.aliases      = {}
		this.permissions  = {}
	}

	get commands ( ) {return this._commands    }
	set commands (_) {       this._commands = _}

	addcommand (format, name, aliases, description, permission, funcperm, funcnoperm) {
		if (this.commands [name]) {
			this.commands [name].addformat (format, func)
		} else {
			this.commands [name] = new pqCommand (name, aliases, description, permission, format, funcperm, funcnoperm)

			if (aliases) {
				for (let alias in aliases) {
					this.aliases [aliases [alias]] = name
				}
			}

			this.permissions [name] = permission
		}
	}

	iscommand (str) {
		if (str.substr (0, 1) != '!' && str.substr (0, 1) != '/') return false

		let command = str.split (' ') [0].substr (1)

		return this.commands [command] || this.aliases [command]
	}

	parse (format, permission, str, ..._) {
		let command = str.split (' ') [0].substr (1)

		command = this.commands [command] ? command : this.aliases [command]

		let commandclass = this.commands [command]

		if ((this.permissions [command] & permission) != 0) {
			return commandclass.run (format, ..._)
		}

		return commandclass.error (format, ..._)
	}
}

module.exports = pqCommandManager